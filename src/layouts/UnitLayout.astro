---
import { marked } from 'marked';
import Navbar from '../components/Navbar.astro';
import BaseLayout from '../layouts/BaseLayout.astro';

const {
  title, image, type, counterpart, description,
  metalCost, energyCost, buildTime, health, sightRange,
  speed, weapons, dps, weaponRange, techLevel, buildPower,
  radarRange, jammerRange, sonarRange
} = Astro.props.frontmatter;

const compiledDescription = marked(description);

// Detection-only units logic
const isRadarUnit = radarRange !== undefined;
const isJammerUnit = jammerRange !== undefined;
const isSonarUnit = sonarRange !== undefined;
const isSensorOnly = !weapons && (isRadarUnit || isJammerUnit || isSonarUnit);

// Don't show speed for static units
const showSpeed = type !== 'Defense' && type !== 'Buildings';
---

<BaseLayout title={`${title} - Legion Unit`}>
  <div style="padding-top: 2rem;">
    <Navbar activeType={type} />
  </div>
  <div class="page">
    <div class="unit-header" style="display: flex; justify-content: space-between; align-items: center;">
      <h1>{title}</h1>
      <a href={`/type/${type.toLowerCase()}`} class="back-link">‚Üê Back to {type} Units</a>
    </div>
    
    <div class="layout">
      <div class="unit-image">
        <img src={image} alt={title} style="width: 100%; border-radius: 10px;" />
      </div>
      
      <div class="stats-panel">
        <h3>Tech Level {techLevel}</h3>
        <div class="stat-row"><span>Metal Cost</span><span>{metalCost}</span></div>
        <div class="stat-row"><span>Energy Cost</span><span>{energyCost}</span></div>
        <div class="stat-row"><span>Build Time</span><span>{buildTime}</span></div>
        <div class="stat-row"><span>Health</span><span>{health}</span></div>
        <div class="stat-row"><span>Sight Range</span><span>{sightRange}</span></div>

        {type === 'Factories' ? (
          <div class="stat-row"><span>Build Power</span><span>{buildPower}</span></div>
        ) : buildPower !== undefined ? (
          <>
            {showSpeed && (
              <div class="stat-row"><span>Speed</span><span>{speed}</span></div>
            )}
            <div class="stat-row"><span>Build Power</span><span>{buildPower}</span></div>
          </>
        ) : isSensorOnly ? (
          <>
            {isRadarUnit && (
              <div class="stat-row"><span>Radar Range</span><span>{radarRange}</span></div>
            )}
            {isJammerUnit && (
              <div class="stat-row"><span>Jammer Range</span><span>{jammerRange}</span></div>
            )}
            {isSonarUnit && (
              <div class="stat-row"><span>Sonar Range</span><span>{sonarRange}</span></div>
            )}
            {showSpeed && (
              <div class="stat-row"><span>Speed</span><span>{speed}</span></div>
            )}
          </>
        ) : (
          <>
            {showSpeed && (
              <div class="stat-row"><span>Speed</span><span>{speed}</span></div>
            )}
            <div class="stat-row weapons-row">
              <span>Weapons</span>
              <span>
                {weapons.split('\n').map((line: string) => (
                  <div>{line}</div>
                ))}
              </span>
            </div>
            <div class="stat-row"><span>DPS</span><span>{dps}</span></div>
            <div class="stat-row"><span>Weapon Range</span><span>{weaponRange}</span></div>
          </>
        )}
      </div>

      <div class="description">
        <div set:html={compiledDescription} />
      </div>
    </div>
  </div>
</BaseLayout>
