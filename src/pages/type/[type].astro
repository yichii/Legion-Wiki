---
import BaseLayout from '../../layouts/BaseLayout.astro';
import Navbar from '../../components/Navbar.astro';
import UnitCard from '../../components/UnitCard.astro';
import FactionHeading from '../../components/FactionHeading.astro';

type Unit = {
  slug: string;
  title: string;
  type: string;
  image: string;
  shortRole?: string;
  counterpart?: string;
  description: string;
  metalCost: number;
  energyCost: number;
  buildTime: number;
  health: number;
  sightRange: number;
  speed: number;
  weapons: string;
  dps: number;
  weaponRange: number;
  techLevel: number;
  buildPower?: number;
};

// ðŸ§  Generate paths for each unique unit type
export async function getStaticPaths() {
  const allUnits = import.meta.glob<{ frontmatter: Unit }>('../../pages/units/*.md', { eager: true });
  const units = Object.values(allUnits).map(u => u.frontmatter);
  units.forEach(u => {
    if (!u.type) {
      console.warn(`Missing "type" for unit: ${u.title ?? 'Unknown Title'}`);
    }
  });
  
  const uniqueTypes = [...new Set(units.map(u => u.type.toLowerCase()))];
  
  return uniqueTypes.map(type => ({
    params: { type }
  }));
}

// ðŸ§  Load units for the current type
const allUnits = import.meta.glob<{ frontmatter: Unit }>('../../pages/units/*.md', { eager: true });
const units = Object.values(allUnits).map(u => u.frontmatter);

const { type } = Astro.params;
const typeCapitalized = type.charAt(0).toUpperCase() + type.slice(1);

const filteredUnits = units
.filter(u => u.type.toLowerCase() === type.toLowerCase())
.sort((a, b) => {
  if (a.techLevel !== b.techLevel) {
    return a.techLevel - b.techLevel; // Sort by techLevel first
  }
  return a.metalCost - b.metalCost;   // If same techLevel, sort by metalCost
});
---

<BaseLayout title={`Legion ${typeCapitalized} Units`}>
  <div class="page">
    <FactionHeading faction="Legion" type={typeCapitalized} />
    <Navbar activeType={type} />
    
    {filteredUnits.length === 0 ? (
      <p style="text-align: center;">No units found for this type.</p>
      ) : (
      <div class="unit-grid">
        {filteredUnits.map(unit => (
          <UnitCard
          title={unit.title}
          image={unit.image}
          slug={unit.slug}
          shortRole={unit.shortRole ?? "Unknown Role"}
          techLevel={unit.techLevel}
          />
          
          ))}
        </div>
        )}
      </div>
      
      <style>
        .unit-grid {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
          gap: 0.75rem;
          justify-items: center;
        }
      </style>
    </BaseLayout>
    