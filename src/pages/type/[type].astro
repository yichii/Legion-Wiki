---
import BaseLayout from '../../layouts/BaseLayout.astro';
import Navbar from '../../components/Navbar.astro';
import UnitCard from '../../components/UnitCard.astro';
import FactionHeading from '../../components/FactionHeading.astro';

type Unit = {
  slug: string;
  title: string;
  type: string; // unitType
  image: string;
  shortRole?: string;
  counterpart?: string;
  description: string;
  metalCost: number;
  energyCost: number;
  buildTime: number;
  health: number;
  sightRange: number;
  speed: number;
  weapons: string;
  dps: number;
  weaponRange: number;
  techLevel: number; // 1, 2, 3
  buildPower?: number;
};

const allUnits = import.meta.glob<{ frontmatter: Unit }>('../../pages/units/*.md', { eager: true });
const units = Object.values(allUnits).map(u => u.frontmatter);

export async function getStaticPaths() {
  const allUnits = import.meta.glob<{ frontmatter: Unit }>('../../pages/units/*.md', { eager: true });
  const units = Object.values(allUnits).map(u => u.frontmatter);
  
  const uniqueTypes = [...new Set(units.map(u => u.type.toLowerCase()))];
  
  return uniqueTypes.map(type => ({
    params: { type },
  }));
}


const { type } = Astro.params;
const typeCapitalized = type.charAt(0).toUpperCase() + type.slice(1);

// Group by tier
const tiers = ['T1', 'T2', 'T3'];
const tierLabels = {
  T1: 'Tech Level 1',
  T2: 'Tech Level 2',
  T3: 'Tech Level 3',
};
const unitsByTier: Record<string, Unit[]> = {
  T1: [],
  T2: [],
  T3: [],
};

for (const unit of units) {
  if (unit.type.toLowerCase() === type.toLowerCase()) {
    const tierKey = `T${unit.techLevel}`;
    if (tiers.includes(tierKey)) {
      unitsByTier[tierKey].push(unit);
    }
  }
}

// Sort within tiers by metalCost (optional)
tiers.forEach(tier => {
  unitsByTier[tier].sort((a, b) => a.metalCost - b.metalCost);
});
---

<BaseLayout title={`Legion ${typeCapitalized} Units`}>
  <div class="page">
    <FactionHeading faction="Legion" type={typeCapitalized} />
    <Navbar activeType={type} />
    
    {tiers
      .filter(tier => unitsByTier[tier].length > 0)
      .map(tier => (
      <section>
        <h2 style="margin-top: 2rem; color: #0f0;">{tierLabels[tier as 'T1' | 'T2' | 'T3']}</h2>
        <div class="unit-grid">
          {unitsByTier[tier].map(unit => (
            <UnitCard
            title={unit.title}
            image={unit.image}
            slug={unit.slug}
            shortRole={unit.shortRole ?? "Unknown Role"}
            techLevel={unit.techLevel}
            showTechBadge={false}
            />
            
            ))}
          </div>
        </section>
        ))}
        
      </div>
      
      <style>
        .unit-grid {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
          gap: 0.75rem;
          justify-items: center;
        }
      </style>
    </BaseLayout>
    